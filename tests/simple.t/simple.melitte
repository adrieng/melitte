val x : 𝕌 0 = Nat

val three : x = suc suc suc zero

val const : ℕ → ℕ = λ x ⇒ zero

val id : ∀ (A : 𝕌 0) → A → A = λ A x ⇒ x

val iter : ∀ (A : 𝕌 0) (f : A → A) → A → ℕ → A =
  λ A f z n ⇒ elim ℕ n with _ ⇒ A { zero ⇒ z | suc _, r ⇒ f r }

val add : ℕ → ℕ → ℕ = iter ℕ (λ n ⇒ suc n)

val mul : ℕ → ℕ → ℕ = λ n ⇒ iter ℕ (add n) zero

val exp : ℕ → ℕ → ℕ = λ n ⇒ iter ℕ (mul n) 1

{-
val exp_n : ℕ → 𝕌 =
  let exp_once : 𝕌 → 𝕌 = λ t ⇒ ℕ → t in
  iter 𝕌 exp_once n ℕ
-}
